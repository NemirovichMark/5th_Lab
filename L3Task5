static double y1(double x)
{
    x = Math.Pow(x, 2) - Math.Sin(x);
    return x;
}
static double y2(double x)
{
    x = Math.Pow(Math.E, x) - 1;
    return x;
}
static void counter(f y1, double x, List<double> A, out List<double> A1)
{
    if (y1(x) >= 0)
        A.Add(1);
    else
        A.Add(0);
    A1 = A;
}
static void count(f y1, double a, double b, double h, out double count)
{
    count = 0;
    List<double> list = new List<double>();
    for (double x = a; x <= b; x += h)
    {
        counter(y1, x, list, out list);
    }
    for (int i = 0; i < list.Count - 1; i++)
    {
        if (list[i] != list[i + 1])
            count++;
        else count = count;
    }
}
static void Main()
{
    List<double> list = new List<double>();
    double count1, count2;
    count(y1, 0, 2, 0.1, out count1);
    count(y2, -1, 1, 0.2, out count2);
    Console.WriteLine($"Y1:{count1} , Y2:{count2}");
}
Main();
delegate double f(double x);
