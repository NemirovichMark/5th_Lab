using System;

namespace _5th_Lab
{
    class Program
    {
        static void Main(string[] args)
        {
            #region 1st Level
            #region n 1
            {
                Console.WriteLine($"5 for 8: {var(5, 8)}");
                Console.WriteLine($"5 for 10: {var(5, 10)} ");
                Console.WriteLine($"5 for 11: {var(5, 11)}");
            }
            #endregion
            #region n 2
            {
                Console.WriteLine("Введите а");
                if (!int.TryParse(Console.ReadLine(), out int a))
                {
                    Console.WriteLine("Eror");
                    return;
                }
                else if (a <= 0)
                {
                    Console.WriteLine("Eror");
                    return;
                }
                Console.WriteLine("Введите b");
                if (!int.TryParse(Console.ReadLine(), out int b))
                {
                    Console.WriteLine("Eror");
                    return;
                }
                else if (b <= 0)
                {
                    Console.WriteLine("Eror");
                    return;
                }
                Console.WriteLine("Введите с");
                if (!int.TryParse(Console.ReadLine(), out int c))
                {
                    Console.WriteLine("Eror");
                    return;
                }
                else if (c <= 0)
                {
                    Console.WriteLine("Eror");
                    return;
                }



                Console.WriteLine("Введите а1");
                if (!int.TryParse(Console.ReadLine(), out int a1))
                {
                    Console.WriteLine("Eror");
                    return;
                }
                else if (a1 <= 0)
                {
                    Console.WriteLine("Eror");
                    return;
                }
                Console.WriteLine("Введите b1");
                if (!int.TryParse(Console.ReadLine(), out int b1))
                {
                    Console.WriteLine("Eror");
                    return;
                }
                else if (b1 <= 0)
                {
                    Console.WriteLine("Eror");
                    return;
                }
                Console.WriteLine("Введите с1");
                if (!int.TryParse(Console.ReadLine(), out int c1))
                {
                    Console.WriteLine("Eror");
                    return;
                }
                else if (c1 <= 0)
                {
                    Console.WriteLine("Eror");
                    return;
                }
                if (ger(a, b, c) > ger(a1, b1, c))
                    Console.WriteLine(ger(a, b, c));
                else
                    Console.WriteLine(ger(a1, b1, c1));

            }
            #endregion
            #endregion
            #region level 2
            #region n 6
            {
                int[] a11 = new int[7] { 7, 2, 3, 4, 5, 6, 13 };
                int[] a2 = new int[8] { 11, 9, 8, 7, 6, 5, 4, 3 };
                int[] a12 = array(a11);
                int[] a13 = array(a2);
                int[] a3 = new int[a12.Length + a13.Length];
                for (int i = 0; i < a12.Length; i++)
                {
                    a3[i] = a12[i];
                }
                for (int i = 0; i < a13.Length; i++)
                {
                    a3[i + a12.Length] = a13[i];
                }
                foreach (var keks in a3)
                    Console.Write($"  {keks}  ");
                Console.WriteLine();
                Console.WriteLine("=========");
            }
            #endregion
            #region n 10
            {
                int[,] Sa = new int[5, 5]
            {
                {1, 2, 3, 4, 5},
                {5,7,8,9,10 },
                {0,-1,2,4,6 },
                {3,6,2,1,7 },
                {4,7,8,9,10 }
            };
                int maximus = Sa[0, 0];
                int indexj = 0;
                int indexjj = 0;
                int minimus = 1000;
                for (int i = 0; i < Sa.GetLength(0); i++)
                {
                    for (int j = 0; j < Sa.GetLength(1); j++)
                    {
                        if (i >= j)
                        {
                            if (Sa[i, j] < minimus)
                            {
                                maximus = Sa[i, j];
                                indexj = j;
                            }
                        }
                        if (i < j)
                        {
                            if (Sa[i, j] > maximus)
                            {
                                minimus = Sa[i, j];
                                indexjj = j;
                            }
                        }
                    }
                }
                int[,] Sl = matrix(Sa, indexj, indexjj);
                for (int i = 0; i < Sl.GetLength(0); i++)
                {
                    for (int j = 0; j < Sl.GetLength(1); j++)
                    {
                        Console.Write(Sl[i, j] + "\t");
                    }
                    Console.WriteLine();
                }
                Console.WriteLine();
            }
            #endregion
            #region n 23
            {
                double[,] Matrix = new double[5, 5] {{1,2,3,4,5},
                                               {6,7,8,9,10 },
                                               {11,12,13,14,15 },
                                               {16,17,18,19,20 },
                                               {21,22,23,34,123425 } };
                double[,] Matrix_2 = new double[6, 6] {   {1234,234,45,2,34,12},
                                                        {11,345,-500,0,-8,1},
                                                        {66,666,77,-2,1,44},
                                                        {17,63,72,2,100,444},
                                                        {566,6656,707,-266,122,494},
                                                        {616,66468,767,-92,71,484}, };
                MatrixMax(Matrix);
                MatrixMax(Matrix_2);
                Console.WriteLine("=============");
                for (int i = 0; i < Matrix.GetLength(0); i++)
                {
                    for (int j = 0; j < Matrix.GetLength(1); j++)
                    {
                        Console.Write("{0, -5}", Matrix[i, j]);
                    }
                    Console.WriteLine();
                }
                Console.WriteLine("=============");
                for (int i = 0; i < Matrix_2.GetLength(0); i++)
                {
                    for (int j = 0; j < Matrix_2.GetLength(1); j++)
                    {
                        Console.Write("{0, -5}", Matrix_2[i, j]);
                    }
                    Console.WriteLine();
                }
            }
            Console.WriteLine();
            #endregion
            #endregion
            #region level 3
            #region n 1
            {
                Summ(Sigma1, DownGrade1, y1, 1, 0.1, 1, 0.1);
                Console.WriteLine();
                Summ(Sigma2, DownGrade2, y2, 0, Math.PI / 5, Math.PI, Math.PI / 25);
            }
            #endregion
            
            #region n 2
            {
                double[,] mmm = new double[5, 5]
                {
                { 3,  6, -2,  6, 12 },
                { -1, 5, 11, -9,  8 },
                { 6,  3, -1,  2,  8 },
                { 11,-10, 5,  2,  7 },
                { 2,  8, -9,  1,  4 }
                };
                for (int i = 0; i < mmm.GetLength(0); i++)
                {
                    if (i % 2 == 0)
                    {
                        Return(up, mmm, i);
                    }
                    else Return(down, mmm, i);
                }
                for (int i = 0; i < mmm.GetLength(0); i++)
                {
                    for (int j = 0; j < mmm.GetLength(1); j++)
                    {
                        Console.Write(mmm[i, j] + "\t");
                    }
                    Console.WriteLine();
                }
                Console.WriteLine();
            }
            #endregion
            #endregion
        }
        static int factorial(int x)
        {
            int f = 1;
            for (int i = 1; i < x; i++)
            {
                f *= i;
            }
            return f;

        }
        static int var(int k, int n)
        {
            return factorial(n) / (factorial(k) * factorial(n - k));
        }
        static double ger(int a, int b, int c)
        {
            int p = (a + b + c) / 2;
            if ((a + b) <= c || (a + c) <= b || (b + c) <= a)
                Console.WriteLine("треугольник фигня");
            return (Math.Pow(p * (p - a) * (p - b) * (p - c), 0.5));
        }
        static int[] array(int[] A  )
        {
            int index = 0, max = A[0];
            for (int i = 0; i < A.Length; i++)
            {

                if (A[i] > max)
                {
                    max = A[i];
                    index = i;
                }
            }
            int[] result = new int[A.Length - 1];
            int index2 = 0;
            for (int i = 0; i < A.Length; i++)
            {
                if (A[i] != max)
                {
                    result[index2] = A[i];
                    index2++;
                }
            }
            return result;
        }
        static int[,] matrix(int[,] SS, int index1, int index2)
        {
            int[,] S1;
            if (index1 == index2)
            {
                S1 = new int[SS.GetLength(0), SS.GetLength(1) - 1];
            }
            else
            {
                S1 = new int[SS.GetLength(0), SS.GetLength(1) - 2];
            }

            for (int i = 0; i < SS.GetLength(0); i++)
            {
                int cntj = 0;
                for (int j = 0; j < SS.GetLength(1); j++)
                {
                    if (j != index1 && j != index2)
                    {
                        S1[i, cntj] = SS[i, j];
                        cntj += 1;
                    }
                }
            }

            return S1;
        }
        static double[,] MatrixMax(double[,] Matrix)
        {
            double[] arr = new double[Matrix.GetLength(0) * Matrix.GetLength(1)];
            int counter = 0;
            for (int i = 0; i < Matrix.GetLength(0); i++)
            {
                for(int j = 0; j < Matrix.GetLength(1); j++)
                {
                    arr[counter] = Matrix[i, j];
                    counter++;
                }
            }
            Array.Sort(arr);
            Array.Reverse(arr);
            counter = 0;
            int flag = 1;
            for (int i = 0; i < Matrix.GetLength(0); i++)
            {
                for (int j =0; j < Matrix.GetLength(0); j++)
                {
                    if (counter == 5)
                    {
                        flag = 1;
                    }
                    if (flag == 1 && (Matrix[i, j] == arr[0] || Matrix[i, j] == arr[1] || Matrix[i, j] == arr[2] || Matrix[i, j] == arr[3] || Matrix[i, j] == arr[4]))
                    {
                        if (Matrix[i, j] >= 0)
                        {
                            Matrix[i, j] *= 2;
                        }
                        else
                        {
                            Matrix[i, j] /= 2;
                            counter++;
                        }
                    }
                    else
                    {
                        if (Matrix[i, j] > 0)
                            Matrix[i, j] /= 2;
                        else
                            Matrix[i, j] *= 2;
                    }                   
                }
            }
            return Matrix;
        }
        delegate double Sigma(int i, double x, int now);
        delegate int DownGrade(int p, int i);
        delegate double y(double x);

        static int DownGrade1(int p, int i) => p * i;
        static int DownGrade2(int p, int i) => p * -1;

        static double Sigma1(int i, double x, int now) => Math.Cos(i * x) / now;
        static double Sigma2(int i, double x, int now) => (Math.Cos(i * x) * now) / (i*i);

        static double y1(double x) => Math.Pow(Math.E, Math.Cos(Math.Sin(x)));
        static double y2(double x) => ((x*x) - Math.Pow(Math.PI, 2)/3)/4;

        static void Summ(Sigma sig, DownGrade down, y _y_, int first_n, double a, double b, double h)
        {
            for (double x = a; x <= b; x += h)
            {
                int i = 1, now = 1;
                double summ = first_n;

                while (Math.Abs(sig(i, x, now)) > 0.0001)
                {
                    now = down(now, i);
                    summ += sig(i, x, now);
                    i++;
                }
                Console.WriteLine(Math.Round(summ, 3) + " " + Math.Round(_y_(x), 3));
            }
        }
        static void Matrixx(double[,] matrix, int index, out double[] array)
        {
            array = new double[matrix.GetLength(1)];
            for (int j = 0; j < matrix.GetLength(1); j++)
            {
                array[j] = matrix[index, j];
            }
        }
        delegate void Deleg(double[] array);
        static void up(double[] array)
        {
            Array.Sort(array);
        }
        static void down(double[] array)
        {
            Array.Sort(array);
            Array.Reverse(array);
        }
        static void Return(Deleg James, double[,] matrix, int index)
        {
            Matrixx(matrix, index, out double[] array);
            James(array);
            double[] array2 = array;
            for (int i = 0; i < array2.Length; i++)
            {
                matrix[index, i] = array2[i];
            }
        }
    }
}